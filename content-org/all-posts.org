#+setupfile: setup.org
#+hugo_section: post
#+seq_todo: TODO DRAFT DONE
#+hugo_front_matter_key_replace: lastmod>mylastmod
#+hugo_front_matter_format: yaml
#+macro: unsplash @@hugo:{{< unsplash leading="$1" id="$2" name="$3" >}}@@
#+macro: pixabay @@hugo:{{< pixabay >}}$1{{< /pixabay >}}@@
#+macro: pexels @@hugo:{{< pexels leading="$1" id="$2" name="$3">}}@@
#+macro: lastmod @@hugo:{{< lastmod >}}@@
#+macro: begin_alert @@hugo:{{< alert $1 >}}@@
#+macro: end_alert @@hugo:{{</ alert >}}@@

* Inbox                                                             :@未分類:
:LOGBOOK:
nil:END:

** TODO =-= の歴史を知りたい
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2020-01-24
:DIR:                images/2020-01-24_hyphen-as-option
:EXPORT_HUGO_BUNDLE: 2020-01-24_hyphen-as-option
:EXPORT_HUGO_SLUG:   hyphen-as-option
:END:

#+begin_src yaml :front_matter_extra t
  image:
    caption: Background image by
#+end_src

https://unix.stackexchange.com/q/21852 辺りのはなし

** TODO この記事を訳す
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2020-01-23
:DIR:                images/2020-01-15_test-optional-with-xctest
:EXPORT_HUGO_BUNDLE: 2020-01-15_test-optional-with-xctest
:EXPORT_HUGO_SLUG:   test-optional-with-xctest
:END:

https://www.swiftbysundell.com/articles/avoiding-force-unwrapping-in-swift-unit-tests/#sticking-with-optionals

* 雑記                                                                :@雑記:
:PROPERTIES:
nil:END:

** DONE 久々の更新                                      :emacs:hugo:ox_hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 2020-01-02_happy_new_year
:EXPORT_HUGO_SLUG: happy-new-year
:EXPORT_DATE: 2020-01-02
:EXPORT_HUGO_ALIASES: /2019/01/happy-new-year/
:END:

最近仕事用のmacを新調して環境を作り直す機会があったことと、 2020 年が始まるということもあり、久々にサイトを更新することにした。

[[file:/cv/][オープン職務経歴書]]を書きたかった、というのもある。

更新にあたっていくつか困難があった。

*まず、このサイトのソースが最近の Hugo では動かせなくなっていた。*

このサイトのテーマには [[https://github.com/digitalcraftsman/hugo-icarus-theme][Icarus]] を使わせていただいているのだが、最終更新が 2017 年となっており、
Hugo 0.55.0 以降で動かなくなってしまっていたり、 Deprecated Warning が出るようになっていた。

[[https://github.com/digitalcraftsman/hugo-icarus-theme/pull/124][PRは出されている]] のだけれど、マージされる様子が無い。

そもそも、当時のバージョンに対してカスタマイズしたレイアウトを作ってしまったので、
単純なテーマの更新だけでは追随できない。

どのバージョンなら動くのか突き止めるのも骨が折れた。
[[https://bitbucket.org/mgladdish/asdf-gohugo][asdf-gohugo]] を入れて、少しずつバージョンを上げながら確認していった。

#+begin_src sh
  asdf plugin add hugo https://bitbucket.org/mgladdish/asdf-gohugo
#+end_src

*そして、そもそも Hugo の使い方を忘れていた。*

[[file:/2016/02/02/blog-with-hugo/][Hugo 導入記事]] や [[file:/2016/01/26/hugo-el/][Hugo 用 Emacs ライブラリ]] を書いておいてなんだが、当時から3年も経ってほとんど忘れてしまっていた。

そこで改めて調べてみると、イマドキは org-mode で書くことも出来るらしい。

この3年ですっかり org-mode 無しでは生きられない体になってしまっていたし、
せっかくなので本記事からは [[https://ox-hugo.scripter.co/][ox-hugo]] を使って書くことにする。

使い始めるにあたって色々調べたり考えたりすることも多かったので、そのうち記事にしようと思う。
結論としては、org-mode と Hugo の組み合わせは最高だし、その橋渡しをしてくれる [[https://ox-hugo.scripter.co/][ox-hugo]] は本当にグッジョブだということ。

...

そんなこんなで色々対応していたものの、デプロイする仕組みなどは当時と変わりなく動いたのでその点は助かった。

org-mode で書けるようになったことだし、少しは記事を書いていきたい所だが、まずは Hugo の最新版に追従する作業が待っている…。

** DONE #MadeWithAcademic                                 :academic:ox_hugo:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 2020-01-06_academic
:EXPORT_HUGO_SLUG: made-with-academic
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-06
:EXPORT_HUGO_ALIASES: /2019/01/made-with-academic/
:END:

[[https://github.com/digitalcraftsman/hugo-icarus-theme][Icarus]] がメンテされておらず Hugo 0.55.0 以降で正しく動かなくなっていたので、
自力で Icarus にパッチを充てるか、別のテーマに乗り換えるかという選択を迫られていた。

せっかくなのでランディングページとブログを別にしたかったので、そういう柔軟性を備えている
[[https://sourcethemes.com/academic/][Academic]] というテーマを使うことにした。

テーマの変更にあたって様々な知見が得られたので、そのうち記事にしたい。

以下その候補:

- [[https://gohugo.io/content-management/page-bundles/][Page Bundles]] への移行
- [[https://ox-hugo.scripter.co/doc/why-ox-hugo/][ox-hugo]] と Academic が如何に相性がよいか
  - auto weight あたりが最高
  - =lastmod= の自動更新や [[https://ox-hugo.scripter.co/doc/custom-front-matter/#front-matter-extra][Front-matter Extra]] は Academic じゃなても最高の体験
- カスタムウィジェットの作り方
- ダークテーマ対応のシンタックスハイライトのやりかた
- conf-toml-mode を [[https://ox-hugo.scripter.co/doc/custom-front-matter/#front-matter-extra][Front-matter Extra]] で使う方法

* 買ったモノ                                                    :@買ったモノ:
** DONE Lenovo Tab M8 が案外良かった                       :Lenovo__Tab__M8:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 2020-01-08_lenovo-tab-m8
:EXPORT_HUGO_SLUG: lenovo-tab-m8
:EXPORT_DATE: 2020-01-11
:DIR:      images/2020-01-08_lenovo-tab-m8
:END:

{{{lastmod}}}

さすがにもう [[file:/2017/04/09/grouper-beanstalk/][Nexus 7 2012]] でやっていくのはしんどくなってきたので、手軽なタブレットを探していたら、
2019 年の 11 月に Lenovo から [[https://hb.afl.rakuten.co.jp/hgc/1a0d625b.bdb81d38.1a0d625c.bf0332b2/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbiccamera%2F4580550700484%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fbiccamera%2Fi%2F12780179%2F&link_type=hybrid_url&ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MCwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjB9][Lenovo Tab M8 (ZA5G0084JP)]] が発売されていたのを知った。

2 万を切る価格で、 Android 9 、クアッドコアでメモリは 2 GB 、
ディスプレイは 8.0 型ワイド IPS パネル (1280x800ドット)と、そこそこ使えそうなスペック。

ただストレージは 16GB と心許ないので、 microSD による拡張は必須(最大128GBまで)。
自分はたまたま持ってた [[https://amzn.to/2QJFCF8][SanDisk 製の microSDXC カード]] を使っている。
アプリ最適化対応じゃないので少々もっさりはするけれど、使えない程ではない。 

電子書籍が読めればいいやというくらいの気持ちで購入したのだけれど、意外なことに *音がいい* 。

確かに [[https://www.lenovo.com/jp/ja/tablets/android-tablets/tab-series/Lenovo-Tab-M8-2nd-Gen-HD/p/ZZITZTATB58][公式サイト]] には以下のようにあるけれども、正直期待していなかった。

#+begin_quote
鮮やかでシームレスな映像表示を実現する狭額縁による高画面占有率83％のマルチタッチ対応の8.0型ワイドIPSパネル、ドルビーオーディオ対応のオーディオ機能を搭載。鮮明な映像と臨場感のあるサウンドで、お気に入りのビデオのストリーミングやモバイルゲームを楽しめます。
#+end_quote

[[https://amzn.to/2T4dbTB][Sony WH-XB900N]] を Bluetooth 接続で聴いているが、手持ちの Pixel 3 XL に繋いだ場合と比較すると結構違う。
そんなに大した耳を持ってるわけじゃないけど、低音がすごく心地良く響く感じ。

イコライザは以下のように設定している:

#+downloaded: file:/Users/yewton/Downloads/drive-download-20200107T213252Z-001/Screenshot_2020-01-08-01-02-47-757.jpeg @ 2020-01-09 06:10:17
#+attr_org: :width 500
#+caption: Dolby Audio のイコライザ設定
[[file:images/2020-01-08_lenovo-tab-m8/2020-01-09_06-10-17_Screenshot_2020-01-08-01-02-47-757.jpeg]]

意外と音が良いので色々やりたくなってしまい、年末にセールしていた [[https://play.google.com/store/apps/details?id=com.square_enix.android_googleplay.FFT_jp2&hl=ja][FINAL FANTASY TACTICS 獅子戦争]] を買ってしまった。
割と快適に動くので読書よりもゲームをやってしまう…。

#+downloaded: file:/Users/yewton/Downloads/drive-download-20200107T213252Z-001/Screenshot (2020_01_08 6_12_13).jpg @ 2020-01-09 08:36:49
#+attr_org: :width 500
#+caption: いつまでもゼクラス砂漠から出られない一行
[[file:images/2020-01-08_lenovo-tab-m8/2020-01-09_08-36-49_Screenshot (2020_01_08 6_12_13).jpg]]

そんなわけで案外良かった Lenovo Tab M8 だがおかしな挙動もあり、
まず *再起動すると必ず「SDカードが見つからない」旨の通知が表示される* 。

そして、 *スクリーンショットの動作が安定しない* 。上記の現象もスクリーンショットが保存できなかった。

一番うっとうしいのが、 *横画面になる度に Lenovo Launcher が停止する* こと。停止する度にダイアログが出るので邪魔。
とはいえ「アプリを閉じる」を選択してしまえば以降差し支えなく使用は可能。

#+attr_org: :width 600
#+caption: 横画面になる度に表示されるうっとうしいダイアログ
[[file:images/2020-01-08_lenovo-tab-m8/2020-01-08_06-36-20_Screenshot_2020-01-08-01-02-37-802.jpeg]]

{{{begin_alert(note)}}}
2020年1月20日に配信されたアップデートを適用したところ、
少なくとも =Lenovo Launcher が停止しました= のダイアログは出なくなっていた。
{{{end_alert}}}

{{{unsplash(Featured image background by, estherrj, Esther Jiao)}}}
* 技術系                                                            :@技術系:

** DONE MacBook Pro (Retina, 15-inch, Mid 2012) で macOS と Xubuntu 19.10 Eoan Ermine をデュアルブートする :macos:ubuntu:xubuntu:xfce:hidpi:
CLOSED: [2020-02-13 木 07:01]
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2020-02-13
:DIR:                images/2020-02-13_macbookpro10-xubuntu
:EXPORT_HUGO_BUNDLE: 2020-02-13_macbookpro10-xubuntu
:EXPORT_HUGO_SLUG:   macbookpro10-xubuntu
:END:

#+begin_src yaml :front_matter_extra t
  image:
    caption: Background image by <a href="https://pixabay.com/users/bharathsiddamjetix37-3810891/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1844603">Bharat Siddam</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1844603">Pixabay</a>
#+end_src

#+toc: headlines 2

*** 前提

- MacBook Pro の種類は [[https://support.apple.com/kb/SP653?locale=ja_JP][15インチMacBook Pro Retinaディスプレイモデル：2.6GHz]]
  - OS は [[https://support.apple.com/ja-jp/HT206886][OS X El Capitan]]
- Xubuntu は [[https://xubuntu.org/news/xubuntu-19-10-released/][Xubuntu 19.10 Eoan Ermine]]
  - 目玉は =improved HiDPI support=

*** パーティションの分割

まず *[[https://support.apple.com/ja-jp/HT204837][FileVault]] が有効な状態ではパーティション操作が出来ない* ので、システム設定から解除する。
解除するだけで数時間かかるので気長に待つ。

FileVault の無効化が済んだら、 [[https://support.apple.com/ja-jp/guide/disk-utility/welcome/mac][Mac 用ディスクユーティリティ]] を使って Xubuntu インストール用のパーティションを用意する。

初期状態だとパーティション作成メニューが選択出来ないので、
[[https://apple.stackexchange.com/questions/304131/no-partition-scheme-option-when-erasing-a-usb-disk-in-macos-high-sierra][No partition scheme option when erasing a USB disk in MacOS High Sierra? - Ask Different]] を参考に
全てのデバイスを表示し、 *ボリュームではなくディスクを選択* する。

今回は単純に半分を mac に、もう半分を Xubuntu で使うように二等分した。
パーティション追加時の初期状態のまま。

このパーティション分割も数時間かかるので気長に待つ。

*** 起動用USBドライブの作成

=xubuntu-19.10-desktop-amd64.iso= を [[https://xubuntu.org/download][Xubuntu 公式サイト]] からダウンロードする。

[[https://ubuntu.com/tutorials/tutorial-create-a-usb-stick-on-macos][Create a bootable USB stick on macOS | Ubuntu]] を参考に、 [[https://www.balena.io/etcher/][Etcher]] で上記の OS イメージを焼く。

用意したのは容量 2GB という骨董品レベルの USB スティックドライブだったが、問題なく動いた。

*** Xubuntu インストール

[[https://support.apple.com/ja-jp/HT202796][Startup Manager]] を起動し、上記の起動USBドライブを挿入する。

すると下の画像のように黄色い =EFI Boot= という名前のドライブが出現するので、
これを選択する。

何故か二つ出現することがあるのだが、どちらを選んでも大丈夫そうだった。

#+ATTR_ORG: :width 500
[[file:images/2020-02-13_macbookpro10-xubuntu/2020-02-13_04-45-56_startup-manager.jpg]]

*初期状態では Wi-Fi が使えない* はずなので、 [[https://amzn.to/2OPxvW3][Rankie の有線LAN アダプタ]] など
ドライバのインストール不要な適当な USB イーサネットアダプタを用意しておく必要がある。

インストール時に
=グラフィックスとWi-Fiハードウェアと追加のメディアフォーマットのサードパーティ製ソフトウェアをインストールする= をチェックしておくと、
初回起動時から Wi-Fi が使えるようになる模様。

いずれにしても有線環境は必要。

[[https://help.ubuntu.com/community/SwapFaq][SwapFaq - Community Help Wiki]] を参考に以下のように =swap= パーティションだけ用意したが、
別に要らなかったかもしれない。あとから [[https://wiki.archlinux.org/index.php/Swap#Swap_file][SwapFile]] を追加することも出来るようだし。

=ブートローダをインストールするデバイス= は Xubuntu のルートパーティションを選択した。

#+ATTR_ORG: :width 1000
[[file:images/2020-02-13_macbookpro10-xubuntu/2020-02-13_04-47-05_IMG_20200211_045148.jpg]]

インストール完了後はデフォルトで Xubuntu が起動するようになる。

変えたくなったら再び Startup Manager を起動すればよい。

*** Xubuntu 初期設定

**** キーテーマをEmacs風(macOS風)にする

#+begin_src sh
xfconf-query -c xsettings -p /Gtk/KeyThemeName -s Emacs
#+end_src

**** タッチパッドの設定(ナチュラルスクロール、水平スクロール)

以下のようなシェルスクリプトを作成し、 =セッションと起動= メニューからログイン時に実行するように設定する。

#+CAPTION: =fix_scroll.sh=
#+begin_src sh
#!/usr/bin/env bash

synclient VertScrollDelta=-$(synclient | grep VertScrollDelta | awk '{print $3}')
synclient HorizTwoFingerScroll=1
synclient HorizScrollDelta=-$(synclient | grep HorizScrollDelta | awk '{print $3}')
#+end_src

**** キーボードの設定(ファンクションキーの有効化)

#+begin_src sh
echo 'options hid_apple fnmode=2' | sudo tee -a /etc/modprobe.d/hid_apple.conf
#+end_src

**** macOS Dock 風のランチャ(Plank)

シンプルな Dock 風のランチャ [[https://launchpad.net/plank][Plank]] をインストールし、 =セッションと起動= メニューからログイン時に実行するように設定する。

#+begin_src sh
sudo apt install plank
#+end_src

**** Alfred, Spotlight 風のランチャ(Albert)

[[https://www.alfredapp.com/][Alfred]] や [[https://support.apple.com/ja-jp/HT204014][Spotlight]] のような使い心地のランチャ [[https://albertlauncher.github.io/][Albert]] をインストールし、 =セッションと起動= メニューからログイン時に実行するように設定する。

#+begin_src sh
curl https://build.opensuse.org/projects/home:manuelschneid3r/public_key | sudo apt-key add -
echo 'deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_19.10/ /' | sudo tee /etc/apt/sources.list.d/home:manuelschneid3r.list
apt update
apt install albert
#+end_src

**** Cica フォントの追加

[[https://github.com/miiton/Cica][miiton/Cica: プログラミング用日本語等幅フォント Cica(シカ)]] をインストールする。

#+begin_src sh
wget [https://github.com/miiton/Cica/releases/download/v5.0.1/Cica_v5.0.1_with_emoji.zip](https://github.com/miiton/Cica/releases/download/v5.0.1/Cica_v5.0.1_with_emoji.zip)
unzip Cica_v5.0.1_with_emoji.zip
sudo mv *.ttf /usr/local/share/fonts/
sudo fc-cache -fv
#+end_src

**** asdf のインストールと設定

[[https://asdf-vm.com/#/core-manage-asdf-vm][asdf]] をインストールし、プラグインに必要なパッケージをインストールする。

#+begin_src sh
sudo apt install \
  automake autoconf libreadline-dev \
  libncurses-dev libssl-dev libyaml-dev \
  libxslt-dev libffi-dev libtool unixodbc-dev \
  unzip curl \
  libbz2-dev libreadline-dev libsqlite3-dev -y
#+end_src

**** Emacs のインストールと設定

[[https://www.gnu.org/software/emacs/][GNU Emacs]] をインスールし、利用するパッケージをインストールする。

#+begin_src sh
sudo apt install build-essential texinfo aspell ripgrep cmigemo -y
sudo snap install emacs --classic
#+end_src

**** ターミナル関連の設定

#+begin_src sh
bot.gpg.key](https://apt.thoughtbot.com/thoughtbot.gpg.key) | sudo apt-key add -
echo "deb [https://apt.thoughtbot.com/debian/](https://apt.thoughtbot.com/debian/) stable main" | sudo tee /etc/apt/sources.list.d/thoughtbot.list
sudo apt-get update
sudo apt install rcm curl fzf fasd tmux powerline -y
curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
#+end_src

fzf は =/usr/share/doc/fzf/README.Debian= にある指示に従う。

**** git の認証ヘルパ設定

#+begin_src sh
sudo apt-get install libsecret-1-0 libsecret-1-dev
(cd /usr/share/doc/git/contrib/credential/libsecret/ && sudo make)
echo -e "\n[credential]\n helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n" >> ~/.gitconfig.local
#+end_src

**** HiDPI への対応

***** 全般

=外観= メニューで =設定= タブの =ウィンドウ拡大縮小= を =2倍= に設定する。

#+ATTR_ORG: :width 500
[[file:images/2020-02-13_macbookpro10-xubuntu/2020-02-13_06-59-55_Screenshot_2020-02-13_06-59-30.png]]

=/etc/environment= に以下を追記する。

#+begin_src sh
GDK_SCALE=2
QT_AUTO_SCREEN_SCALE_FACTOR=0
QT_SCALE_FACTOR=2
#+end_src

***** Emacs

フォントサイズが小さいままなので、サイズ指定を倍にすることで暫定対応。

ただ、画像やモードラインの高さなどが小さいままなので、対応検討中。

***** GIMP

テーマ設定でフォントを大きくするしかない。

#+begin_src sh
cp -r /usr/share/gimp/2.0/themes/Dark ~/.config/GIMP/2.10/themes/MyDark
#+end_src

等で元になるテーマをコピーし、以下のような指定を追記(コメントアウトを解除)する。

#+begin_src conf
gtk-font-name = "Noto Sans Regular 18"
font_name = "Noto Sans Regular 18"
#+end_src

*** 参考にしたリンク集

- [[https://apple.stackexchange.com/questions/304131/no-partition-scheme-option-when-erasing-a-usb-disk-in-macos-high-sierra][No partition scheme option when erasing a USB disk in MacOS High Sierra? - Ask Different]]
- [[https://blog.b-shock.org/2018/03/03/Xubuntu-MacBook-Air/][MacBook AirをXubuntuとのデュアルブートにした。 | b-shock. Fortress]]
- [[https://ubuntu.com/tutorials/tutorial-create-a-usb-stick-on-macos][Create a bootable USB stick on macOS | Ubuntu]]
- [[https://wiki.archlinux.org/index.php/HiDPI][HiDPI - ArchWiki]]
- [[https://wiki.archlinux.org/index.php/MacBookPro10,x][MacBookPro10,x - ArchWiki]]
- [[http://esperas.info/index.php?QBlog-20180312-2][macでUSB起動したxubuntuでWiFiを使えた！ - そよ風ブログ - esperas! エスペラントの世界]]
- [[https://help.ubuntu.com/community/SwapFaq][SwapFaq - Community Help Wiki]]
- [[https://www.maketecheasier.com/install-dual-boot-ubuntu-mac/][How to Install and Dual-Boot Ubuntu on Mac - Make Tech Easier]]
- [[https://askubuntu.com/questions/149971/how-do-you-remap-a-key-to-the-caps-lock-key-in-xubuntu][How do you remap a key to the Caps Lock key in Xubuntu? - Ask Ubuntu]]
- [[https://www.ubuntuupdates.org/ppa/google_chrome][UbuntuUpdates - PPA: Google Chrome]]
- [[https://askubuntu.com/questions/690512/how-to-enable-natural-scrolling-in-xfce4][xubuntu - How to enable natural scrolling in xfce4? - Ask Ubuntu]]
- [[https://bugzilla.xfce.org/show_bug.cgi?id=11193][11193 – GTK3 apps don't understand natural scrolling]]
- [[https://askubuntu.com/questions/440670/how-do-i-enable-horizontal-scroll-on-lubuntu-desktop][touchpad - How do I enable horizontal scroll on lubuntu desktop - Ask Ubuntu]]
- [[https://docs.xfce.org/apps/terminal/dropdown][apps:terminal:dropdown [Xfce Docs]​]]
- [[https://qiita.com/yuji38kwmt/items/cffc3507e0cbd0b76454][Xubuntu: `xdg-user-dirs-gtk-update`でユーザーディレクトリが英語名になったけど、なぜか`デスクトップ`ディレクトリが英語にならない - Qiita]]
- [[https://github.com/albertlauncher/albert/issues/793][Ubuntu 19.04 package · Issue #793 · albertlauncher/albert]]
- [[https://unix.stackexchange.com/questions/121395/on-an-apple-keyboard-under-linux-how-do-i-make-the-function-keys-work-without-t][On an Apple Keyboard under Linux, how do I make the Function keys work without the fn modifier key? - Unix & Linux Stack Exchange]]

* Emacs                                                              :@Emacs:
** DRAFT Emacs の info の使い方いつも忘れる
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-10_emacs-info
:EXPORT_HUGO_BUNDLE: 2020-01-10_emacs-info
:EXPORT_HUGO_SLUG: emacs-info
:END:

** TODO ox-hugo と academic の素晴らしさ
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2020-01-24
:DIR:                images/2020-01-24_ox-hugo-academic
:EXPORT_HUGO_BUNDLE: 2020-01-24_ox-hugo-academic
:EXPORT_HUGO_SLUG:   ox-hugo-academic
:END:

logdone 入れないと当日公開に出来ないかも？
 https://ox-hugo.scripter.co/doc/dates/#date

#+begin_src yaml :front_matter_extra t
  image:
    caption: Background image by
#+end_src

** DRAFT org-mode column view で clock した結果を集計
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_columns-clocksum
:EXPORT_HUGO_BUNDLE: 2020-01-09_columns-clocksum
:EXPORT_HUGO_SLUG: columns-clocksum
:END:

#+begin_src org
  ,#+COLUMNS:  %40ITEM %TODO %CLOCKSUM %JIRA
#+end_src

** DRAFT ox-hugo の src block caption はどこから来てるのか
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-10_ox-hugo-src-block-caption
:EXPORT_HUGO_BUNDLE: 2020-01-10_ox-hugo-src-block-caption
:EXPORT_HUGO_SLUG: ox-hugo-src-block-caption
:END:

[[file:~/.emacs.d/var/el-get/org-mode/lisp/ox.el::("Listing" ("ar" :default "برنامج") ("cs" :default "Program") ("da" :default "Program") ("de" :default "Programmlisting") ("es" :default "Listado de programa") ("et" :default "Loend") ("fr" :default "Programme" :html "Programme") ("it" :default "Listato") ("ja" :default "ソースコード")][koko]]

** DRAFT org-mode で祝日とか
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-10_org-mode-holidays-anniversaries
:EXPORT_HUGO_BUNDLE: 2020-01-10_org-mode-holidays-anniversaries
:EXPORT_HUGO_SLUG: org-mode-holidays-anniversaries
:END:

#+begin_src org
  ,* 記念日 
  ,#+CATEGORY: omochi
  %%(org-date 2020 1 8) omochi 記念日
  %%(diary-anniversary 1 8 2019) omochi %d 歳記念日
#+end_src

** DONE org-mode に Chrome で開いてるページへのリンクを貼りたい :emacs:org__mode:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-10
:DIR:      images/2020-01-09_org-mode-web-link
:EXPORT_HUGO_BUNDLE: 2020-01-09_org-mode-web-link
:EXPORT_HUGO_SLUG: org-mode-web-link
:END:

=org-mode= のリンクマークアップはちょっと特殊で、エスケープの仕様も独特です。

また、  [[https://code.orgmode.org/bzg/org-mode/src/release_9.3/etc/ORG-NEWS][2019年の12月にリリースされたバージョン 9.3 で後方互換性の無い仕様変更が入る]] ということも有りました。

#+begin_quote
*Version 9.3*

*Incompatible changes*

Change bracket link escaping syntax
Org used to percent-encode sensitive characters in the URI part of the bracket links.

Now, escaping mechanism uses the usual backslash character, according to the following rules, applied in order:
#+end_quote

#+caption[=org-mode=]: (参考) =org-mode= 9.3 でのエスケープ実装
#+begin_src emacs-lisp
  (defun org-link-unescape (link)
    "Remove escaping backslash characters from string LINK."
    (replace-regexp-in-string
     (rx (group (one-or-more "\\")) (or string-end (any "[]")))
     (lambda (_)
       (concat (make-string (/ (- (match-end 1) (match-beginning 1)) 2) ?\\)))
     link nil t 1))
#+end_src

こういう背景もあり、 =org-mode= の外で工夫して =org-mode= 形式のリンクを生成するよりは、
 =org-mode= 自体に任せてしまうのが安心です。

[[https://github.com/rexim/org-cliplink][org-cliplink]] というパッケージもありますが、これだとログインが必要なページへのリンクは
(Basic 認証を設定していなければ)生成出来ません。

もっと手軽に、 Chrome で見ているページへのリンクを挿入する手段として、
[[https://github.com/ku/CreateLink][CreateLink]] という Chrome 拡張機能を使う方法があります。

以下のように改行区切りでコピーするような設定を追加します:

#+begin_example
  %text%%newline%%url%
#+end_example

CreateLink の =%text%= は改行をスペースに変換する仕様になっているので、区切り文字として改行を利用するのは安全なハズです。

そして、以下のような独自関数を定義します:

#+begin_src emacs-lisp
  (require 's)

  (defun ytn-org-insert-weblink ()
    (interactive)
    (let* ((pair (s-split "\n" (with-temp-buffer (clipboard-yank) (buffer-string))))
           (desc (first pair))
           (link (second pair)))
      (insert (org-make-link-string link desc))))
#+end_src

単純に改行で区切って =org-make-link-string= に渡すだけです。

これを、個人的には ~M-L~ にアサインしています([[https://github.com/jwiegley/use-package][use-package]] の =bind-key= を利用しています):

#+begin_src emacs-lisp
  (bind-key "M-L" #'ytn-org-insert-weblink org-mode-map)
#+end_src

以上、ちょっとした小ネタでした。

** DRAFT auto-commit-and-push のこと書きたい
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_auto-commit-and-push
:EXPORT_HUGO_BUNDLE: 2020-01-09_auto-commit-and-push
:EXPORT_HUGO_SLUG: auto-commit-and-push
:END:

#+caption: .dir-locals.el
#+begin_src emacs-lisp
  ((nil . ((eval git-auto-commit-mode 1)
           (gac-automatically-push-p . t))))
#+end_src

=git-auto-commit-mode= は autoload されるので、 autoload が適切に扱われていれば =require= は不要。

** DRAFT org-download と ox-hugo を組み合わせて記事への画像挿入を快適にする :emacs:ox__hugo:org__download:org__attach:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_org-download-ox-hugo
:EXPORT_HUGO_BUNDLE: 2020-01-09_org-download-ox-hugo
:EXPORT_HUGO_SLUG: org-download-ox-hugo
:END:

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :functions (org-link-escape)
    :config
    (setq org-download-method 'attach)
    (setq org-download-link-format-function
          (lambda (filename)
            (format org-download-link-format
                    (org-link-escape
                     (funcall org-download-abbreviate-filename-function filename)))))
    (setq org-download-annotate-function
          (lambda (link)
            (format "#+DOWNLOADED: %s @ %s\n#+ATTR_ORG: :width 500\n"
                    (if (equal link org-download-screenshot-file)
                        "screenshot"
                      link)
                    (format-time-string "%Y-%m-%d %H:%M:%S"))))
    (add-hook 'dired-mode-hook 'org-download-enable))

  (use-package org
    :config
    (setq org-use-property-inheritance '("DIR")))

  (require 's)
  (defun ytn-new-post-template ()
    (let* ((slug (read-string "Slug: "))
           (now (current-time))
           (export-date (format-time-string "%Y-%m-%d" now))
           (id (format "%s_%s" export-date slug)))
      (s-lex-format "\
  ,* DRAFT %?
  :PROPERTIES:
  :EXPORT_FILE_NAME:   index
  :EXPORT_DATE:        ${export-date}
  :DIR:                images/${id}
  :EXPORT_HUGO_BUNDLE: ${id}
  :EXPORT_HUGO_SLUG:   ${slug}
  :END:")))

  (setq org-capture-templates '(("n" "サイト用")
                                ("np" "New post" entry (file+headline "~/Projects/yewton.net/content-org/all-posts.org" "Inbox")
                                 (function ytn-new-post-template) :empty-lines 1 :prepend t)
                                ))
#+end_src

** DRAFT Emacs で文字列補間(String interpolation)したい
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_s-lex-format
:EXPORT_HUGO_BUNDLE: 2020-01-09_s-lex-format
:EXPORT_HUGO_SLUG: s-lex-format
:EXPORT_HUGO_TAGS: s.el emacs
:END:

https://emacs.stackexchange.com/questions/7377/named-string-substitution

** DRAFT Emacs でマジックコメントを反映させたいとき
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_find-alternate-file
:EXPORT_HUGO_BUNDLE: 2020-01-09_find-alternate-file
:EXPORT_HUGO_SLUG: find-alternate-file
:END:

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
  ;; Local Variables:
  ;; flycheck-disabled-checkers: (emacs-lisp emacs-lisp-checkdoc)
  ;; no-byte-compile: t
  ;; End:
#+end_src

=find-alternate-file=

#+begin_quote
Find file /FILENAME/, select its buffer, kill previous buffer.
If the current buffer now contains an empty file that you just visited
(presumably by mistake), use this command to visit the file you really want.
#+end_quote

https://superuser.com/questions/208488/how-do-i-re-open-a-file-in-emacs

** DRAFT emacs-plus で入れた Emacs が Spotlight 検索に引っかからない :emacs:spotlight:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-09
:DIR:      images/2020-01-09_emacs-plus-spotlight
:EXPORT_HUGO_BUNDLE: 2020-01-09_emacs-plus-spotlight
:EXPORT_HUGO_SLUG: emacs-plus-spotlight
:END:

https://qiita.com/delphinus/items/438046d2bbeb3e63f8fa

* Webサイト運用                                              :@Webサイト運用:
** DRAFT Academic テーマへの移行手順                    :emacs:hugo:ox_hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: 2020-01-25_migrate-to-hugo-academic
:EXPORT_HUGO_SLUG: random
:EXPORT_DATE: 2019-01-05
:END:

org-mode ではタグにハイフンを付けられない。

=ox_hugo= ~hoge~

conf-toml がある https://github.com/dryman/toml-mode.el/issues/14

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after ox
    :init
    (defalias 'toml-mode 'conf-toml-mode)
    :config 
    (setq org-hugo-use-code-for-kbd t))
#+end_src

https://github.com/sourcethemes/academic-scripts に page bunlde 化するスクリプトがある。

#+begin_src sh
  asdf plugin add hugo https://github.com/beardix/asdf-hugo
#+end_src


=baseurl= を設定しないと Twitter Card などが表示されないので気をつけよう

#+begin_src toml
  # The URL of your site.
  # End your URL with a `/` trailing slash, e.g. `https://example.com/`.
  baseurl = "https://www.yewton.net/"
#+end_src

=google_tag_manager= が設定されていると Google Analytics のコードが埋め込まれない
https://spectrum.chat/academic/help/google-analytics-not-working-for-me~3e802803-663f-4b38-8d6f-bc645935da26?authed=true

*** ox-hugo alias

#+begin_example
  :EXPORT_HUGO_ALIASES: /2019/01/happy-new-year/
#+end_example


*** hugo-academic のデフォが removePathAccents=true な注意

サーチコンソール
ゲーム感想 → ケーム感想になってた
** DONE Hugo Academic でダーク・ライト両モードに対応した Chroma によるシンタックスハイライト :emacs:chroma:hugo:academic:
CLOSED: [2020-01-24 金 08:37]
:PROPERTIES:
:EXPORT_FILE_NAME:   index
:EXPORT_DATE:        2020-01-23
:DIR:                images/2020-01-23_hugo-academic-dark-light-code-block
:EXPORT_HUGO_BUNDLE: 2020-01-23_hugo-academic-dark-light-code-block
:EXPORT_HUGO_SLUG:   hugo-academic-dark-light-code-block
:END:

#+begin_src yaml :front_matter_extra t
  image:
    caption: Background image by <a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@markusspiske?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Markus Spiske"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white" viewBox="0 0 32 32"><title>unsplash-logo</title><path d="M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"></path></svg></span><span style="display:inline-block;padding:2px 3px">Markus Spiske</span></a>
#+end_src

#+toc: headlines 2

*** 前提

[[https://sourcethemes.com/academic/][Academic テーマ]] のデフォルト設定は [[https://sourcethemes.com/academic/docs/writing-markdown-latex/#code-highlighting][ドキュメントにもある通り]] [[https://highlightjs.org/][highlight.js]] を使ったもので、
この仕組みに乗っておけば基本的には問題ありません。

ただし highlight.js には一つ問題があって… *EmacsLisp に対応していません* (Lisp には対応)。
具体的には =with-eval-after-load= のような独自のマクロや、
DocString 中のクオテーションといった EmacsLisp 方言には対応出来ません。

一方、 Hugo 標準の [[https://gohugo.io/content-management/syntax-highlighting/][Syntax Highlighting]] は [[https://github.com/alecthomas/chroma][Chroma]] を使ったもので、
こちらは *EmacsLisp に対応しています* 。

([[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] の作者さんが過去に [[https://github.com/alecthomas/chroma/issues/43][Issue に挙げてくれていた]] 模様…感謝 🙏)

[[https://codepen.io/yewton/pen/RwNvdBz][CodePen]] と [[https://swapoff.org/chroma/playground/][Chroma Playground]] とでそれぞれの出力結果を比べてみるとよく分かります:

#+CAPTION: 元のコード
#+begin_src emacs-lisp
  (defvar hoge "fuga"
    "Doc String 中の `QUOTE' はどうなるかな？")

  (with-eval-after-load 'foo
    (unless (eq t nil) "EmacsLisp 独自キーワードはどうなるかな？")
#+end_src

#+ATTR_ORG: :width 500
#+CAPTION: highlight.js w/ GitHub style
[[file:images/2020-01-23_hugo-academic-dark-light-code-block/2020-01-24_05-59-12_貼り付けた画像_2020_01_24_5_58.png]]

#+ATTR_ORG: :width 500
#+CAPTION: Chroma w/ GitHub style
[[file:images/2020-01-23_hugo-academic-dark-light-code-block/2020-01-24_05-56-58_貼り付けた画像_2020_01_24_5_56.png]]

そこで、 *Academic を使いつつ、 Hugo 標準のハイライトの仕組みを使いたい* というのが動機となります。


*** Academic 標準のコードハイライトを無効にする

[[https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options][ドキュメント]] に書かれている通り、 =config.toml= で =params.highlight= オプションを無効にする必要があります。

[[https://sourcethemes.com/academic/][Academic Kickstart]] をベースにしている場合、 =params.toml= で以下のように設定します:

#+CAPTION: =params.toml=
#+begin_src toml
# Enable source code highlighting? true/false
# Documentation: https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options
highlight = false
#+end_src

*** Hugo のコードハイライトを有効にする

[[https://sourcethemes.com/academic/][Academic Kickstart]] をベースにしている場合、 =config.toml= で以下のように
Hugo のコードハイライトが無効にされていると思います:

#+begin_src toml
  [markup.highlight]
    codeFences = false  # Disable Hugo's code highlighter as it conflicts with Academic's highligher.
#+end_src

これを以下のように変更します:

#+begin_src toml
  [markup.highlight]
    codeFences = true
    noClasses = false
#+end_src

=noClasses = false= としているのは、 *ダーク・ライトの両方のモードに対応させるため* です。
=noClasses= が =true= の場合、スタイル指定が HTML 中に埋め込まれます。
これだとモードの変更に追従して動的にスタイルを変更するということが出来ないため、
CSS クラスだけを HTML に埋め込んでもらうようにします。

*** ダークモード用とライトモード用の Chroma スタイルを決める

[[https://xyproto.github.io/splash/docs/][Chroma Style Gallery]] ギャラリーを参考に、
*ダークモード時に使うスタイルとライトモード時に使うスタイルをそれぞれ決めます* 。
モードの切り替わりに応じて、シンタックスハイライトのスタイル自体を変更してしまいます。

選定の際の注意事項として、 *スタイルによって細かいクラス指定に対応していない場合があります* 。

具体的には、 EmacsLisp の =defvar= などは =NameBuiltin= としてパースされ、
=.nb= というクラスが指定されるのですが、これが含まれていないスタイルがいくつかあります。

参考までに、調査した結果を以下に列挙します:

**** light スタイル

***** =NameBuiltin= が含まれるもの

- [[https://xyproto.github.io/splash/docs/abap.html][abap]]
- [[https://xyproto.github.io/splash/docs/algol.html][algol]]
- [[https://xyproto.github.io/splash/docs/algol_nu.html][algol_nu]]
- [[https://xyproto.github.io/splash/docs/arduino.html][arduino]]
- [[https://xyproto.github.io/splash/docs/autumn.html][autumn]]
- [[https://xyproto.github.io/splash/docs/colorful.html][colorful]]
- [[https://xyproto.github.io/splash/docs/emacs.html][emacs]]
- [[https://xyproto.github.io/splash/docs/friendly.html][friendly]]
- [[https://xyproto.github.io/splash/docs/github.html][github]]
- [[https://xyproto.github.io/splash/docs/lovelace.html][lovelace]]
- [[https://xyproto.github.io/splash/docs/manni.html][manni]]
- [[https://xyproto.github.io/splash/docs/murphy.html][murphy]]
- [[https://xyproto.github.io/splash/docs/pastie.html][pastie]]
- [[https://xyproto.github.io/splash/docs/perldoc.html][perldoc]]
- [[https://xyproto.github.io/splash/docs/pygments.html][pygments]]
- [[https://xyproto.github.io/splash/docs/rainbow_dash.html][dash]]
- [[https://xyproto.github.io/splash/docs/solarized-light.html][light]]
- [[https://xyproto.github.io/splash/docs/tango.html][tango]]
- [[https://xyproto.github.io/splash/docs/trac.html][trac]]
- [[https://xyproto.github.io/splash/docs/vim.html][vim]]
- [[https://xyproto.github.io/splash/docs/xcode.html][xcode]]

***** =NameBuiltin= が含まれないもの

- [[https://xyproto.github.io/splash/docs/borland.html][borland]]
- [[https://xyproto.github.io/splash/docs/bw.html][bw]]
- [[https://xyproto.github.io/splash/docs/igor.html][igor]]
- [[https://xyproto.github.io/splash/docs/monokailight.html][monokailight]]
- [[https://xyproto.github.io/splash/docs/paraiso-light.html][light]]
- [[https://xyproto.github.io/splash/docs/vs.html][vs]]

**** dark スタイル

***** =NameBuiltin= が含まれるもの

- [[https://xyproto.github.io/splash/docs/api.html][api]]
- [[https://xyproto.github.io/splash/docs/dracula.html][dracula]]
- [[https://xyproto.github.io/splash/docs/native.html][native]]
- [[https://xyproto.github.io/splash/docs/solarized-dark.html][dark]]
- [[https://xyproto.github.io/splash/docs/solarized-dark256.html][dark256]]
- [[https://xyproto.github.io/splash/docs/swapoff.html][swapoff]]

***** =NameBuiltin= が含まれないもの

- [[https://xyproto.github.io/splash/docs/fruity.html][fruity]]
- [[https://xyproto.github.io/splash/docs/monokai.html][monokai]]
- [[https://xyproto.github.io/splash/docs/paraiso-dark.html][dark]]
- [[https://xyproto.github.io/splash/docs/rrt.html][rrt]]

*** Chroma 用の CSS を生成する

スタイルを決めたら以下のように CSS を生成します。
生成された CSS は標準出力に吐き出されるため、適当なファイルにリダイレクトするか、 =pbcopy= 等にパイプしてクリップボードに格納しましょう:

#+Begin_src sh
  hugo gen chromastyles --style=pygments
  hugo gen chromastyles --style=native
#+end_src

この後多少手を加える必要があるので、やりやすいように [[https://css2sass.herokuapp.com/][CSS 2 SASS/SCSS CONVERTER]] 等で SCSS に変換しておくとよいです。

*** Academic のテーマと競合しないようにする

生成した CSS(SCSS) は [[https://sourcethemes.com/academic/docs/customization/#customize-style-css][Academic のドキュメント]] に従い =custom.css= に追加します。

ただし、Academic には標準のハイライトのためのスタイル指定があるため、
Chroma が生成したスタイル指定をそのまま組込むと若干コンフリクトします。

そこで、多少手を加えてやります。

まずライトモード時のスタイルについては、
=background-color= や =color= が指定されていない場合があるため( =pygments= 等)、
[[https://swapoff.org/chroma/playground/][Chroma Playground]] の出力結果を参考にしてスタイル指定を追加します。

また、 Academic 組込みの =code= へのスタイル指定より優先度が高くなるように、
セレクタを =pre.chroma, .chroma code= とします。

最終的に以下のようになります:

#+begin_src scss
  pre.chroma, .chroma code {

      background-color: #f5f5f5;
      color: #4a4a4a;
#+end_src

次にダークモード時のスタイルについては、
基本的に =background-color= や =color= も指定されていると思うので、
セレクタのみ =.dark pre.chroma, .dark .chroma code= としてあげます。

以上で、 *Hugo Academic を使いつつ、 Chroma でシンタックスハイライト* が実現出来ました。


** DONE 無料でいい感じのバナー用背景素材をダウンロード出来るフリー画像サービス 3 選
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-13
:DIR:      images/2020-01-13_unsplash-pexels-pixabay
:EXPORT_HUGO_BUNDLE: 2020-01-13_unsplash-pexels-pixabay
:EXPORT_HUGO_SLUG: unsplash-pexels-pixabay
:END:

#+begin_src yaml :front_matter_extra t
  image:
    caption: Image by <a href="https://pixabay.com/users/Sambeetarts-1339110/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1732847">Sambeet D</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1732847">Pixabay</a>
#+end_src

記事のバナー、アイキャッチ画像([[https://sourcethemes.com/academic/][Academic]] 的には [[https://sourcethemes.com/academic/docs/managing-content/#featured-image][Featured image]])があると書く時のテンションが上がるので、
出来るだけ設定するようにしたい。

でも出来るだけ手間はかけたくない…、そんな時に使っているサービスを順不同で挙げる。

なお、いずれのサービスにおいても、 =geometric= (幾何学模様)や
=abstract= (抽象的)、あるいは =network= や =programming= といったワードで検索すると、
いわゆる /いい感じ/ な画像がヒットする。

*** Unsplash

[[https://www.notion.so/][Notion]] のカバーイメージ選択欄にあったので存在を知った。

#+attr_org: :width 500
[[file:images/2020-01-13_unsplash-pexels-pixabay/2020-01-13_11-43-22_ash-edmonds-0aWZdK8nK2I-unsplash.jpg]]
{{{unsplash(Image by,badashphotos,Ash Edmonds)}}}

[[https://unsplash.com/license][License | Unsplash]]

[[https://help.unsplash.com/en/articles/2612315-can-i-use-unsplash-photos-for-personal-or-commercial-projects][FAQ ページ]] より引用:

#+begin_quote
The photos on Unsplash are free to use and can be used for most commercial, personal projects, and for editorial use. 
#+end_quote

*** Pexels

#+attr_org: :width 500
[[file:images/2020-01-13_unsplash-pexels-pixabay/2020-01-13_11-46-07_abstract-architecture-building-exterior-geometric-593158.jpg]]
{{{pexels(Photo by,scottwebb,Webb from Pexels)}}}

[[https://www.pexels.com/photo-license/][License of our free stock photos - Pexels]]

[[https://www.pexels.com/ja-jp/faq/][FAQ ページ]] より引用:

#+begin_quote
Yes, all photos and videos are free for commercial use. You can use them on your commercial website, blog, product or anywhere else. 
#+end_quote

#+begin_quote
すべての写真や動画は、商業コンテンツの一部として無料で利用できます。商業用のWebサイト、ブログ、製品、その他どんな場所にでも利用可能です。
#+end_quote

*** Pixabay

#+ATTR_ORG: :width 500
[[file:images/2020-01-13_unsplash-pexels-pixabay/2020-01-23_04-30-34_social-3064515_1280.jpg]]
{{{pixabay(Image by <a href="https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3064515">Gerd Altmann</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3064515">Pixabay</a>)}}}

[[https://pixabay.com/service/license/][Pixabay License]]

[[https://pixabay.com/service/faq/][FAQ ページ]] より引用:

#+begin_quote
You can copy, modify, distribute, and use the images, even for commercial purposes, all without asking for permission or giving credits to the artist. However, depicted content may still be protected by trademarks, publicity or privacy rights.
#+end_quote

#+begin_quote
これらの画像は、商用、非商用を問わず、コピー、改変、再配布することができます。利用に関する許諾や使用料の支払いは必要ありません。しかし、画像の中には商標やパブリシティ権、プライバシー権などに基づき保護されているものが含まれます。
#+end_quote


** DONE GitHub Pages + Cloudflare から Netlify に移行した
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_DATE: 2020-01-13
:DIR:      images/2020-01-13_hugo-netlify
:EXPORT_HUGO_BUNDLE: 2020-01-13_hugo-netlify
:EXPORT_HUGO_SLUG: hugo-netlify
:EXPORT_HUGO_TAGS: Hugo Netlify Cloudflare "GitHub Pages"
:END:

#+begin_src yaml :front_matter_extra t
  image:
    caption: Background image by <a href="https://pixabay.com/users/PIRO4D-2707530/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1687319">PIRO4D</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1687319">Pixabay</a>
#+end_src

[[/2016/02/02/blog-with-hugo/][この記事にあるとおり]] 、当初このサイトは [[https://pages.github.com/][GitHub Pages]] でホストされ、
[[https://www.cloudflare.com/][Cloudflare CDN]] を利用して配信していた。

だが先日 [[/2020/01/06/made-with-academic/][テーマを変えた]] ときに、既に使われていないリソースがそのまま残ってしまっていることに気がついた。
単純に =/public= 以下を =git add -a= しているだけなので、明示的に消さなければ反映されなくて当然だった。

デプロイスクリプトを見直してもよかったが、 [[https://gohugo.io/][Hugo]] 自体が [[https://www.netlify.com/][Netlify]] でホストされているし、
[[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/][Netlify でホストするときの公式ドキュメントも用意されている]] し、
[[https://docs.netlify.com/site-deploys/post-processing/#post-processing-features][アセットの最適化機能]] とかもついてくるし、何より [[https://www.netlify.com/pricing/][無料だし]] 、
ということで、移行することを決めた。

#+toc: headlines 2

*** デプロイ手順

[[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/][公式ドキュメント]] を超ざっくり要約すると、

1.  [[https://app.netlify.com/][Netlify でアカウント作成]]
2.  [[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/#configure-hugo-version-in-netlify][=netlify.toml=]] をドキュメントを参考に配置
3.  連携する GitHub リポジトリを選択
4.  =Deploy site= ボタンをポチる

*以上。*

これだけで =hoge.netlify.com= でアクセス出来るようになる。いい時代になった。

*** ドメイン移行手順

ただドメインも移行する場合はもう一手間必要で、[[https://docs.netlify.com/domains-https/custom-domains/configure-external-dns/][Netlify の公式ドキュメント]] に従って
DNS レコードの設定をする必要がある。

[[https://www.cloudflare.com/][Cloudflare]] の場合は、以下のように Cloudflare のダッシュボードで、
各ドメインが Netlify への =CNAME= となるように設定する。

#+DOWNLOADED: file:/Users/yewton/Downloads/cloudflare.png @ 2020-01-13 15:37:38
#+ATTR_ORG: :width 500
[[file:images/2020-01-13_hugo-netlify/2020-01-13_15-37-38_cloudflare.png]]


このとき、 *=Proxy status= が =DNS only= となるように*
(雲のアイコンがオレンジではなくグレーになるように) 設定する必要がある。

さもないと、 Cloudflare の CDN 機能が間に挟まってしまい、 Netlify 側から認識されない。

なお、 *=DNS only= にした時点で Cloudflare が発行した SSL 証明書は無効になる* 。
そのため、ここからなるべく早く [[https://docs.netlify.com/domains-https/https-ssl/#certificate-service-types][Netlify 側の SSL 証明書の設定]] をした方がいい。

当サイトの場合は設定してから1時間もしない内に SSL 証明書が有効になっていた。

*** GitHub Pages で提供していたその他のリポジトリのリダイレクト設定手順

サイトだけなら以上で万事完了なのだけれど、 GitHub Pages を利用していた場合の注意点として、
=github.io= リポジトリで =CNAME= を設定していた場合、それ以外で Pages 機能を利用しているリポジトリも同様のドメインでアクセスされるようになっている。
つまり、 =github.io= を Netlify へ向けた時点で、 *それ以外のリポジトリが全てリンク切れとなる。*

そのため、適切にリダイレクトするようにしなければならない。

[[https://docs.netlify.com/routing/redirects/][Netlify の公式ドキュメント]] に従ってやればいい…と思ったのだけれど、
原因は不明だが *=netlify.toml= で設定しようとしても反映されなかった* 。

最終的な =_redirects= ファイルの内容は以下のようになった:

#+begin_src text
https://yewton-net.netlify.com/* https://www.yewton.net/:splat 301!

/swagger-top-down-playground/* https://yewton.github.io/swagger-top-down-playground/:splat 301!
/dockerfiles/*                 https://yewton.github.io/dockerfiles/:splat 301!
/kafka-doc-ja/*                https://yewton.github.io/kafka-doc-ja/:splat 301!
#+end_src


*** その後

移行ついでに [[https://developer.okta.com/blog/2019/04/11/site-security-cloudflare-netlify][How to Configure Better Web Site Security with Cloudflare and Netlify | Okta Developer]] を参考に
[[https://securityheaders.com/][Security Headers]] や [[https://www.ssllabs.com/ssltest/index.html][SSL Server Test]] で高評価になるように設定を見直したりなどした。

ただこれはあんまり理解しないで書かれてる通りやっただけなところがあるので、いつか改めて記事にしたい。

#+ATTR_ORG: :width 500
[[file:images/2020-01-13_hugo-netlify/2020-01-13_15-12-54_securityheaders.png]]

#+ATTR_ORG: :width 500
[[file:images/2020-01-13_hugo-netlify/2020-01-13_15-15-03_qualys.png]]

# Local Variables:
# org-attach-auto-tag: nil
# End:
